// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name clovergoclient
import Alamofire
import CloverGoLogger
import CloverGoReaderSDK
import CommonCrypto
import CoreTelephony
import Foundation
import ObjectMapper
import RealmSwift
import Security
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
@_exported import clovergoclient
@objc @_hasMissingDesignatedInitializers public class Inventory : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let name: Swift.String
  @objc final public let price: Swift.Int
  @objc final public let priceType: Swift.String?
  @objc public var stockCount: Swift.Int
  @objc public var taxRates: [clovergoclient.TaxRate]?
  @objc public var categories: [clovergoclient.ItemCategory]?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ItemCategory : ObjectiveC.NSObject {
  @objc public var id: Swift.String
  @objc public var name: Swift.String
  @objc deinit
}
@objc public enum TransactionErrorEvent : Swift.Int {
  case avs_failure
  case duplicate_transaction
  case offline
  case offline_threshold_limit_exceeded
  case partial_auth
  case cvv_mismatch
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CardReaderInitializationEvent : Swift.Int {
  case clear_aid_pk_complete
  case aid_flush_complete
  case public_key_flush_complete
  case dol_flush_complete
  case initialization_complete
  case downloading_firmware
  case firware_download_complete
  case updating_firmware
  case firmware_update_complete
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TransactionEvent : Swift.Int {
  case card_swiped
  case card_tapped
  case swipe_failed
  case emv_card_swiped_error
  case emv_dip_failed_3_attempts
  case emv_card_dip_failed
  case emv_card_inserted
  case emv_card_removed
  case contactless_failed_try_again
  case contactless_failed_try_contact
  case please_see_phone
  case multiple_contactless_cards_detected
  case swipe_dip_tap_card
  case remove_card
  case processing_transaction
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CardReaderErrorEvent : Swift.Int {
  case initialization_failed
  case reader_data_not_avaliable
  case firmware_download_failed
  case firmware_update_failed
  case firmware_update_not_supported
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Env : Swift.Int {
  case live
  case demo
  case sandbox
  case test
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CardType : Swift.Int {
  case VISA
  case MC
  case DISCOVER
  case AMEX
  case DINNERS
  case JCB
  case CHINA_UNION_PAY
  case DEFAULT
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CLVGoTransactionType : Swift.Int {
  case unknown
  case keyed
  case auth
  case manualrefund
  case preauth
  case purchase
  case tokenize
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MerchantPropertyType : Swift.Int {
  case supportsAuths
  case supportsPreAuths
  case supportsSales
  case supportsVaultCards
  case supportsManualRefunds
  case supportsVoids
  case supportsTipAdjust
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Refund : ObjectiveC.NSObject {
  @objc public var id: Swift.String! {
    get
  }
  @objc public var orderId: Swift.String! {
    get
  }
  @objc public var amount: Swift.Int {
    get
  }
  @objc public var tax: Swift.Int {
    get
  }
  @objc public var createdTime: Foundation.NSDate! {
    get
  }
  @objc public var clientCreatedTime: Foundation.NSDate! {
    get
  }
  @objc public var paymentId: Swift.String! {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OfflineSettings : ObjectiveC.NSObject {
  @objc public var enabled: Swift.Bool
  @objc public var maxDaysAllowedOffline: Swift.Int
  @objc public var totalPaymentsLimit: Swift.Int
  @objc public var perPaymentLimit: Swift.Int
  @objc public var promptThreshold: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Order : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var customItems: [clovergoclient.CustomItem]
  @objc public var inventoryItems: [clovergoclient.InventoryItem]
  @objc public var tip: Swift.Int
  @objc public var externalPaymentId: Swift.String?
  @objc public var customTax: Swift.Int
  @objc public var transactionType: clovergoclient.CLVGoTransactionType
  @objc public var note: Swift.String?
  @objc public var quickMode: Swift.Bool
  @objc public var total: Swift.Int {
    @objc get
  }
  @objc public var subTotal: Swift.Int {
    @objc get
  }
  @objc public var tax: Swift.Int {
    @objc get
    @objc set(newTax)
  }
  @objc override dynamic public init()
  @objc public func addCustomItem(item: clovergoclient.CustomItem)
  @objc public func addInventoryItem(item: clovergoclient.InventoryItem)
  @objc deinit
}
public func == (lhs: clovergoclient.Order, rhs: clovergoclient.Order) -> Swift.Bool
@objc public class CustomItem : ObjectiveC.NSObject {
  @objc public var taxRate: clovergoclient.TaxRate?
  @objc public var name: Swift.String
  @objc public var price: Swift.Int
  @objc public var createdDate: Foundation.Date?
  @objc public var quantity: Swift.Int
  @objc public var total: Swift.Int {
    @objc get
  }
  @objc public var tax: Swift.Int {
    @objc get
  }
  @objc public init(name: Swift.String, price: Swift.Int, quantity: Swift.Int)
  @objc convenience public init(name: Swift.String, price: Swift.Int, quantity: Swift.Int, taxRate: clovergoclient.TaxRate?, createdDate: Foundation.Date?)
  public func update(name: Swift.String?, price: Swift.Int?, quantity: Swift.Int?, taxRate: clovergoclient.TaxRate?)
  @objc public func update(name: Swift.String, price: Swift.Int, quantity: Swift.Int, taxRate: clovergoclient.TaxRate?)
  @objc public func delete()
  @objc deinit
}
@objc public class InventoryItem : ObjectiveC.NSObject {
  @objc public var item: clovergoclient.Inventory
  @objc public var quantity: Swift.Int
  @objc public var total: Swift.Int {
    @objc get
  }
  @objc public var tax: Swift.Int {
    @objc get
  }
  @objc public init(inventory: clovergoclient.Inventory, quantity: Swift.Int)
  @objc public func update(quantity: Swift.Int)
  @objc public func delete()
  @objc deinit
}
@objc public class KeyedRequest : ObjectiveC.NSObject {
  final public let cardNumber: Swift.String
  final public let expDate: Swift.String
  final public let cvv: Swift.String
  public var zipCode: Swift.String?
  public var streetAddress: Swift.String?
  public var cardPresent: Swift.Bool
  final public let order: clovergoclient.Order
  public var readerConnected: Swift.Bool?
  @objc public init(cardNumber: Swift.String, expDate: Swift.String, cvv: Swift.String, order: clovergoclient.Order)
  @objc convenience public init(cardNumber: Swift.String, expDate: Swift.String, cvv: Swift.String, order: clovergoclient.Order, zipCode: Swift.String?, streetAddress: Swift.String?, cardPresent: Swift.Bool)
  @objc deinit
}
@objc public protocol TransactionDelegate {
  @objc func onTransactionResponse(transactionResponse: clovergoclient.TransactionResult)
  @objc func onError(error: clovergoclient.CloverGoError)
  @objc func proceedOnError(event: clovergoclient.TransactionErrorEvent, proceedOnErrorDelegate: clovergoclient.ProceedOnError)
  @objc func onAidMatch(cardApplicationIdentifiers: [clovergoclient.CardApplicationIdentifier], delegate: clovergoclient.AidSelection)
  @objc func onProgress(event: clovergoclient.TransactionEvent)
  @objc optional func onReadCardDataResponse(data: [Swift.String : Swift.String])
}
@objc public protocol CardReaderDelegate {
  @objc func onConnected(cardReaderInfo: clovergoclient.ReaderInfo)
  @objc func onDisconnected(cardReaderInfo: clovergoclient.ReaderInfo)
  @objc func onError(event: clovergoclient.CardReaderErrorEvent)
  @objc func onReady(cardReaderInfo: clovergoclient.ReaderInfo)
  @objc func onReaderResetProgress(event: clovergoclient.CardReaderInitializationEvent)
  @objc func onCardReaderDiscovered(readers: [clovergoclient.ReaderInfo])
  @objc optional func onPlugged()
}
@objc public protocol ProceedOnError {
  @objc func proceed(value: Swift.Bool)
}
@objc public protocol AidSelection {
  @objc func selectApplicationIdentifier(cardApplicationIdentifier: clovergoclient.CardApplicationIdentifier?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CloverGo : ObjectiveC.NSObject {
  public static var sharedInstance: clovergoclient.CloverGo
  @objc public static var allowAutoConnect: Swift.Bool
  @objc public static var overrideDuplicateTransaction: Swift.Bool
  @objc public static var overrideAddressVerification: Swift.Bool
  @objc public static var remoteApplicationID: Swift.String
  @objc public static var remoteApplicationVersion: Swift.String
  @objc public static var enableQuickChip: Swift.Bool
  @objc public class func enableLogs(_ enable: Swift.Bool)
  @objc public class func enableLogs(_ enable: Swift.Bool, loggerDelegate: CloverGoLogger.LoggerDelegate)
  @objc public class func isLogsEnabled() -> Swift.Bool
  @objc public static let OfflinePaymentProcessingStarted: Foundation.Notification
  @objc public static let OfflinePaymentProcessingCompleted: Foundation.Notification
  @objc public static let OfflinePaymentProcessingSuspended: Foundation.Notification
  @objc(initializeWithAccessToken:apiKey:secret:env:) public func initializeWithAccessToken(accessToken: Swift.String, apiKey: Swift.String, secret: Swift.String, env: clovergoclient.Env)
  @objc(initializeWithApiKey:secret:env:) public func initializeWithApiKey(apiKey: Swift.String, secret: Swift.String, env: clovergoclient.Env)
  @objc public func loadInventory(forceReload: Swift.Bool = false, success: @escaping ([clovergoclient.Inventory]) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func loadTaxes(forceReload: Swift.Bool = false, success: @escaping ([clovergoclient.TaxRate]) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func sendReceipt(orderId: Swift.String, email: Swift.String?, phone: Swift.String?)
  @objc public func captureSignatureWithTip(paymentId: Swift.String, xy: Swift.Array<[[Swift.Int]]>, tip: Swift.Int)
  @objc public func captureSignature(paymentId: Swift.String, xy: Swift.Array<[[Swift.Int]]>)
  @objc public func doKeyedTransaction(keyedRequest: clovergoclient.KeyedRequest, delegate: clovergoclient.TransactionDelegate)
  @objc public func doCardReaderTransaction(readerInfo: clovergoclient.ReaderInfo, order: clovergoclient.Order, delegate: clovergoclient.TransactionDelegate)
  @objc public func doReadCardData(readerInfo: clovergoclient.ReaderInfo, delegate: clovergoclient.TransactionDelegate)
  @objc public func cancelCardReaderTransaction(readerInfo: clovergoclient.ReaderInfo)
  @objc public func useReader(cardReaderInfo: clovergoclient.ReaderInfo, delegate: clovergoclient.CardReaderDelegate)
  @objc public func isConnected(cardReaderInfo: clovergoclient.ReaderInfo) -> Swift.Bool
  @objc public func releaseReader(cardReaderInfo: clovergoclient.ReaderInfo)
  @objc public func connectToBTReader(readerInfo: clovergoclient.ReaderInfo)
  @objc public func resetReader(readerInfo: clovergoclient.ReaderInfo)
  @objc public func doCapturePreAuthTransaction(paymentId: Swift.String, amount: Swift.Int, tipAmount: Swift.Int, success: @escaping (Swift.Bool) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func doCloseOutTransaction(success: @escaping (Swift.Bool) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func doRefundTransaction(paymentId: Swift.String, success: @escaping (clovergoclient.Refund) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func doRefundTransactionWithAmount(paymentId: Swift.String, amount: Swift.Int, success: @escaping (clovergoclient.Refund) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func doAddTipTransaction(paymentId: Swift.String, amount: Swift.Int, success: @escaping (Swift.Bool) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func doVoidTransaction(paymentId: Swift.String, orderId: Swift.String, voidReason: Swift.String?, success: @escaping (Swift.Bool) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func deleteOrder(orderId: Swift.String, success: @escaping (Swift.Bool) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func getMerchantInfo(success: @escaping (clovergoclient.Merchant) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc public func getOfflineTransactionHistory(success: @escaping ([clovergoclient.Transaction]?) -> Swift.Void)
  @objc public func getOfflineStats(success: @escaping (clovergoclient.OfflineStats) -> Swift.Void)
  @objc public func reRunFailedOfflineTransactions()
  public func updateFirmware(cardReaderInfo: clovergoclient.ReaderInfo)
  public func getPaymentByExternalPaymentId(extPaymentId: Swift.String, success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (clovergoclient.CloverGoError) -> Swift.Void)
  @objc deinit
}
@objc public class ReaderInfo : ObjectiveC.NSObject {
  @objc public var batteryPercentage: Swift.Int
  @objc public var serialNumber: Swift.String?
  @objc public var connected: Swift.Bool
  @objc final public let readerType: clovergoclient.ReaderInfo.CardReaderType
  @objc public var bluetoothId: Swift.String?
  @objc public var bluetoothName: Swift.String?
  @objc public var readerName: Swift.String?
  @objc public var firmwareVersion: Swift.String?
  @objc public init(readerType: clovergoclient.ReaderInfo.CardReaderType, serialNumber: Swift.String?)
  @objc public enum CardReaderType : Swift.Int {
    case RP350
    case RP450
    public func toString() -> Swift.String
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc public class CloverGoError : ObjectiveC.NSObject {
  @objc final public let code: Swift.String
  @objc final public let message: Swift.String
  @objc public init(code: Swift.String, message: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CardApplicationIdentifier : ObjectiveC.NSObject {
  @objc final public let applicationLabel: Swift.String
  @objc final public let applicationIdentifier: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TransactionResult : ObjectiveC.NSObject {
  @objc public var orderId: Swift.String!
  @objc public var paymentId: Swift.String!
  @objc public var status: Swift.String?
  @objc public var amountCharged: Swift.Int
  @objc public var taxAmount: Swift.Int
  @objc public var tipAmount: Swift.Int
  @objc public var transactionDate: Foundation.NSDate?
  @objc public var cvmResult: Swift.String?
  @objc public var cardType: Swift.String?
  @objc public var mode: Swift.String?
  @objc public var maskedCardNo: Swift.String?
  @objc public var transactionType: Swift.String?
  @objc public var authCode: Swift.String?
  @objc public var cardHolderName: Swift.String?
  @objc public var expirationDate: Swift.String?
  @objc public var token: Swift.String?
  @objc public var externalPaymentId: Swift.String?
  @objc public var applicationIdentifier: Swift.String?
  @objc public var offline: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
public class Reachability {
  public typealias NetworkReachable = (clovergoclient.Reachability) -> ()
  public typealias NetworkUnreachable = (clovergoclient.Reachability) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: clovergoclient.Reachability.NetworkStatus, b: clovergoclient.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: clovergoclient.Reachability.NetworkReachable?
  public var whenUnreachable: clovergoclient.Reachability.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var currentReachabilityString: Swift.String {
    get
  }
  public var currentReachabilityStatus: clovergoclient.Reachability.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension clovergoclient.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Merchant : ObjectiveC.NSObject {
  @objc public var id: Swift.String!
  @objc public var name: Swift.String?
  @objc public var mccCode: Swift.String?
  @objc public var features: [Swift.String]?
  @objc public var offlineSettings: clovergoclient.OfflineSettings?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class StringUtil {
  open class func leftPadding(toLength: Swift.Int, character: Swift.Character, string: Swift.String) -> Swift.String
  open class func isAlphaNumeric(_ text: Swift.String) -> Swift.Bool
  @objc deinit
}
public struct SortedJSONEncoding : Alamofire.ParameterEncoding {
  public static var `default`: clovergoclient.SortedJSONEncoding {
    get
  }
  public static var prettyPrinted: clovergoclient.SortedJSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: Alamofire.URLRequestConvertible, with parameters: Alamofire.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: Alamofire.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
@objc public class TaxRate : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let name: Swift.String
  @objc final public let rate: Swift.Double
  @objc final public let isDefault: Swift.Bool
  @objc public init(id: Swift.String, name: Swift.String, rate: Swift.Double, isDefault: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CardUtility : ObjectiveC.NSObject {
  public static func validateCardNumber(cardNumber: Swift.String) -> Swift.Bool
  public static func getCardType(cardNumber: Swift.String) -> clovergoclient.CardType
  public static func getMaskedPAN(_ pan: Swift.String) -> Swift.String?
  public static func validateKeyedExpiryDate(expDate: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class OfflineStats : ObjectiveC.NSObject {
  @objc public var noOfDaysOffline: Swift.Int
  @objc public var totalAmount: Swift.Int
  @objc public var totalTransactionCount: Swift.Int
  @objc public var failedTransactionCount: Swift.Int
  @objc public var pendingTransactionCount: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class Transaction : ObjectiveC.NSObject {
  @objc public var amount: Swift.Int {
    get
  }
  @objc public var orderId: Swift.String! {
    get
  }
  @objc public var paymentId: Swift.String! {
    get
  }
  @objc public var createdTime: Foundation.Date! {
    get
  }
  @objc public var lastPaymentTime: Foundation.Date? {
    get
  }
  @objc public var last4: Swift.String! {
    get
  }
  @objc public var offline: Swift.Bool {
    get
  }
  public var offlineState: clovergoclient.OfflineTransactionState {
    get
  }
  @objc public var failureReason: Swift.String? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum OfflineTransactionState : Swift.Int {
  case unknown
  case inprogress
  case pending
  case failed
  public func toString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension clovergoclient.TransactionErrorEvent : Swift.Equatable {}
extension clovergoclient.TransactionErrorEvent : Swift.Hashable {}
extension clovergoclient.TransactionErrorEvent : Swift.RawRepresentable {}
extension clovergoclient.CardReaderInitializationEvent : Swift.Equatable {}
extension clovergoclient.CardReaderInitializationEvent : Swift.Hashable {}
extension clovergoclient.CardReaderInitializationEvent : Swift.RawRepresentable {}
extension clovergoclient.TransactionEvent : Swift.Equatable {}
extension clovergoclient.TransactionEvent : Swift.Hashable {}
extension clovergoclient.TransactionEvent : Swift.RawRepresentable {}
extension clovergoclient.CardReaderErrorEvent : Swift.Equatable {}
extension clovergoclient.CardReaderErrorEvent : Swift.Hashable {}
extension clovergoclient.CardReaderErrorEvent : Swift.RawRepresentable {}
extension clovergoclient.Env : Swift.Equatable {}
extension clovergoclient.Env : Swift.Hashable {}
extension clovergoclient.Env : Swift.RawRepresentable {}
extension clovergoclient.CardType : Swift.Equatable {}
extension clovergoclient.CardType : Swift.Hashable {}
extension clovergoclient.CardType : Swift.RawRepresentable {}
extension clovergoclient.CLVGoTransactionType : Swift.Equatable {}
extension clovergoclient.CLVGoTransactionType : Swift.Hashable {}
extension clovergoclient.CLVGoTransactionType : Swift.RawRepresentable {}
extension clovergoclient.MerchantPropertyType : Swift.Equatable {}
extension clovergoclient.MerchantPropertyType : Swift.Hashable {}
extension clovergoclient.MerchantPropertyType : Swift.RawRepresentable {}
extension clovergoclient.ReaderInfo.CardReaderType : Swift.Equatable {}
extension clovergoclient.ReaderInfo.CardReaderType : Swift.Hashable {}
extension clovergoclient.ReaderInfo.CardReaderType : Swift.RawRepresentable {}
extension clovergoclient.Reachability.NetworkStatus : Swift.Equatable {}
extension clovergoclient.Reachability.NetworkStatus : Swift.Hashable {}
extension clovergoclient.OfflineTransactionState : Swift.Equatable {}
extension clovergoclient.OfflineTransactionState : Swift.Hashable {}
extension clovergoclient.OfflineTransactionState : Swift.RawRepresentable {}
